# File for testing and learning related to the canonical decomposition project.
"""
from tetrahedron import*
from perm4 import*
from Exact_Arithmetic import*
from simplex import*
from Dest_to_Triang import*
"""
from canonize_part1 import*
from SimplicialOrbifold import*
from IsomorphismSignature import*
import json
from canonize_part2 import*
from CanonizeInfo import*
from simplicial_maps import*
from quotient import quotient

def print_face_statuses(orb):
    for tet in orb.Tetrahedra:
        if tet.canonize_info is not None:
            print('face status of',tet,'is')
            print(tet.canonize_info.face_status)
        else:
            print(tet,'has no canonize info')

def print_face_concavity(orb):
    for tet in orb.Tetrahedra:
        for face in TwoSubsimplices:
            if concave_face(face,tet):
                print('face',FaceIndex[face],'of',tet,'is concave')
            if transparent_face(face,tet):
                print('face',FaceIndex[face],'of',tet,'is transparent')

"""
orb.info()
initialize_tet_status(orb)
new_orb = hyperbolic_to_simplicial(orb)
tet1 = new_orb.Tetrahedra[1]
new_orb.one_to_four(tet1)
print(' ')
new_orb.info()
print_face_statuses(new_orb)
tet0 = new_orb.Tetrahedra[0]
tet1 = new_orb.Tetrahedra[1]
print(' ')
print(tet0.canonize_info.face_status[F3])
print(' ')
new_orb.two_to_three(F3,tet0)
print(' ')
new_orb.info()
print_face_statuses(new_orb)
tet0 = new_orb.Tetrahedra[0]
new_orb.two_to_three(F0,tet0)
print(' ')
new_orb.info()
print_face_statuses(new_orb)
tet0 = new_orb.Tetrahedra[0]
tet1 = new_orb.Tetrahedra[1]
edge = tet0.Class[E23]
print(new_orb.cancel_tetrahedra(edge))
print(' ')
new_orb.info()
print_face_statuses(new_orb)
"""

"""
Dest = [0,0,0,0]

orb = dest_to_orb(Dest)

orb.info()

tet0 = orb.Tetrahedra[0]

print(orb.isometries())
print(orb.is_canonical)
"""


"""
This is the 4 tet dest seq from Fact 5.5.
"""
"""
Dest = [0,1,1,0,1,0,0,2,3,2,2,1,2,3,3,3]

orb = dest_to_orb(Dest)

print("Dest seq (index 4) is")
print(Dest)
print(' ')
print("Regular triangulation is")
print(show_triangulation(orb.Tetrahedra))
print(' ')
print("Isometry group of regular triangulation is")
print(orb.isometries())
print(' ')
tet0 = orb.Tetrahedra[0]

print(tet0.tilt(V0))
print(tet0.tilt(V1))
print(tet0.tilt(V2))
print(tet0.tilt(V3))

# tet0.tilt(V2) is positive, and F2 is glued to itself, so that face is bad. Do 2-3 move through it.

#print(check_2_to_3_possible(orb.Tetrahedra,tet0,F2))

next_list = two_to_three(orb.Tetrahedra,orb.Tetrahedra[0],F2)

orb = CuspedOrbifold(next_list)
print("Canonical triangulation is")
print(show_triangulation(orb.Tetrahedra))

tet0 = orb.Tetrahedra[0]


print(tet0.tilt(V0))
print(tet0.tilt(V1))
print(tet0.tilt(V2))
print(tet0.tilt(V3))

# from checking tilt sums, this is canonical.
print(' ')
print("Isometry group of Canonical triangulation is")
print(orb.isometries())
print(' ')
"""


"""
This is one of the 8 tet dest seqs from Fact 5.5.
"""
"""
Dest = [0,1,2,1,2,3,0,0,1,0,4,2,4,5,1,4,3,2,5,3,5,4,3,6,7,6,6,5,6,7,7,7]

orb = dest_to_orb(Dest)

print("Dest seq (index 8) is")
print(Dest)
print(' ')
print("Regular triangulation is")
show_triangulation(orb.Tetrahedra)
print(' ')
print("Isometry group of regular triangulation is")
print(orb.isometries())
print(' ')

tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]

#print((tet0.tilt(V1) + tet1.tilt(V2)).evaluate() > 0)

next_list = two_to_three(tets_list,tet0,F1)

#show_triangulation(next_list)

tet0 = CuspedOrbifold(next_list).Tetrahedra[0]

#print(tet0.tilt(V1).evaluate())
#print(tet0.tilt(V2).evaluate())

#print(check_2_to_3_possible([tet0],tet0,F1))

next_list = two_to_three([tet0],tet0,F1)

orb = CuspedOrbifold(next_list)

print("Canonical triangulation is")

show_triangulation(orb.Tetrahedra)

tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]

print(orb.is_canonical)
# It's canonical.

print(' ')
print("Isometry group of canonical triangulation is")
print(orb.isometries())
print(' ')
"""







"""
Dest = [0,1,2,3,2,2,0,2,1,0,1,1,4,3,3,0,3,4,4,4]

orb = dest_to_orb(Dest)
show_triangulation(orb.Tetrahedra)

tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]

print(tet0.tilt(V0))
print(tet0.tilt(V1))
print(tet0.tilt(V2))
print(tet0.tilt(V3))
print(tet1.tilt(V2))
# Tilts of the faces of tet0 which are glued to themselves are negative. But tet0.tilt(V3) + tet1.tilt(V2) = 0,
# similarly tet1.tilt(Vi) + tet0.tilt(V3) = 0 for the other i's. This means we should attach a copy of tet0 to
# each face of tet1 and remove the connecting faces, giving a cube. The canonical decomposition is then this cube
# with a bunch of symmetries (all the ones preserving the inner tetrahedron) and the faces of the cube glued to
# themselves, carried over from tet0.
"""


"""
Following is the triangulation you get after doing a new move on the immediately above triangulation,
where we got stuck. See write-ups for explanantion of this move. It seems to work.
"""
"""
Dest = [0,1,2,3, 2,4,0,2, 1,0,5,1, 6,3,3,0, 5,7,1,8, 4,2,7,9, 3,6,6,6, 7,5,4,10, 
11,9,11,4, 12,13,8,5, 13,12,13,7, 8,8,12,12, 9,11,10,11, 10,10,9,13]

orb = dest_to_orb(Dest)
show_triangulation(orb.Tetrahedra)
tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
tet2 = orb.Tetrahedra[2]
print(orb.is_canonical)
print(tet0.tilt(V3) + tet1.tilt(V2))
orb.arrow_two_to_three(F3,tet0)
tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
show_triangulation(orb.Tetrahedra)
print(orb.is_canonical)
show_triangulation(orb.Tetrahedra)
print(tet0.tilt(V2) + tet1.tilt(V1))
#Now we do a 3-6 move, with some flat tets.
orb.three_to_six(F2,tet0)
show_triangulation(orb.Tetrahedra)
print(orb.is_canonical)
#And we get something canonical.

#Below we get the same canonical triangulation "by hand". I did this before I programmed the 3-6 move,
#to see if it would actually help in this situation.

tet0 = Tetrahedron()
tet1 = Tetrahedron()
tet2 = Tetrahedron()

tet0.Index = 0
tet1.Index = 1
tet2.Index = 2

a = SquareRootCombination([(1,2)])
b = SquareRootCombination([(3,2)])
tet0.fill_edge_params(ComplexSquareRootCombination(a,b))

a = SquareRootCombination.Zero()
b = SquareRootCombination([(3,Fraction(1,6))])
tet1.fill_edge_params(ComplexSquareRootCombination(a,b))

a = SquareRootCombination([(1,Fraction(21,18))])
b = SquareRootCombination([(3,Fraction(1,6))])
tet2.fill_edge_params(ComplexSquareRootCombination(a,b))

tet0.attach(F0,tet1,(1,0,2,3))
tet0.attach(F2,tet1,(1,0,2,3))
tet1.attach(F0,tet2,(3,1,2,0))
tet1.attach(F3,tet2,(3,1,2,0))

tet0.Symmetries = [Perm4((0,1,2,3)),Perm4((1,0,3,2))]
tet2.Symmetries = [Perm4((0,1,2,3)),Perm4((2,3,0,1))]

orb = CuspedOrbifold([tet0,tet1,tet2])

show_triangulation(orb.Tetrahedra)

print(orb.is_canonical)

print(tet0.tilt(V0) + tet1.tilt(V1))
print(tet0.tilt(V2) + tet1.tilt(V2))
print(tet1.tilt(V0) + tet2.tilt(V3))
print(tet1.tilt(V3) + tet2.tilt(V0)) 
"""




"""
# Another degree 14 cover.
Dest = [1,1,1,2, 0,0,0,3, 4,4,5,0, 6,7,6,1, 2,8,2,6, 8,2,9,7, 3,3,10,4, 10,11,3,5, 5,12,4,11, 
12,5,12,12, 7,6,13,13, 13,13,7,8, 9,9,8,9, 11,10,11,10]

orb = dest_to_orb(Dest)

tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
tet2 = orb.Tetrahedra[2]
tet3 = orb.Tetrahedra[3]

print(tet0.tilt(V2) + tet1.tilt(V2))
print(tet0.tilt(V0) + tet2.tilt(V2))
print(tet2.tilt(V0) + tet3.tilt(V2))

# All negative, so it's canonical. That's good, because I don't think any 2-3 moves were possible here.
"""



"""
# The one triangulation with 9 tetrahedra.

Dest = [0,0,0,1, 2,3,4,0, 1,5,6,2, 6,6,1,4, 5,1,5,3, 4,4,2,7, 3,2,3,8, 8,8,8,5, 7,7,7,6]

orb = dest_to_orb(Dest)

tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]

print(tet0.tilt(V0) + tet1.tilt(V2))
print(tet0.tilt(V2))

# Both are negative, so this is canonical.
"""


"""
# A triangulation with 12 tetrahedra.
Dest = [0,1,1,2, 1,0,0,3, 4,5,5,0, 6,7,7,1, 2,8,8,4, 8,2,2,7,
 3,9,9,6, 9,3,3,5, 5,4,4,10, 7,6,6,11, 11,10,10,8, 10,11,11,9]

orb = dest_to_orb(Dest)

show_triangulation(orb.Tetrahedra)
print(orb.is_canonical)
print(orb.DestSeq)

tet0 = orb.Tetrahedra[0]

print(tet0.tilt(V0) + tet0.tilt(V1))
print((tet0.tilt(V0) + tet0.tilt(V1)).evaluate())
print(tet0.tilt(V2))
print(tet0.tilt(V3))

print(orb.is_canonical)

# It's canonical.
"""



"""
Dest = [0,1,2,0, 2,3,0,4, 1,0,5,6, 5,7,1,5, 8,6,6,1, 3,2,7,3,
 9,4,4,2, 7,5,3,10, 4,9,9,9, 6,8,8,8, 11,10,10,7, 10,11,11,11]

orb = dest_to_orb(Dest)
print(orb.Vertices)
orb.info()
#print(orb.is_canonical)
tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
tet2 = orb.Tetrahedra[2]
orb.two_to_three(F2,tet0)
orb.info()
#print(tet0.tilt(V2))
orb.arrow_two_to_three(F2,tet0)
#print(orb.is_canonical)
#orb.info()
tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
tet2 = orb.Tetrahedra[2]
#print(tet2.tilt(V0) + tet0.tilt(V2))
#print(tet0.tilt(V3) + tet1.tilt(V2))
orb.arrow_two_to_three(F3,tet0)
#orb.info()
#print(orb.is_canonical)
tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
#print(tet0.tilt(V0) + tet1.tilt(V0))
#Think you do a 3-2 now.
print(orb.three_to_two(tet0.Class[E23]))
orb.info()
print(orb.is_canonical)
tet0 = orb.Tetrahedra[0]
print(tet0.tilt(V0) + tet0.tilt(V1))
print(tet0.tilt(V2))
print(tet0.tilt(V3))
#This is canonical. Interestingly, it's also a triangulation with all regular tets,
#like the starting triangulation. This was also an interesting example because it required
#a 3-2 move.
print(orb.Vertices)
"""


"""
# the 8-tet dest seq whose isometry group jason wants to know.
Dest = [1,2,2,1,0,3,3,0,3,0,0,4,2,1,1,5,6,5,5,2,7,4,4,3,4,7,7,7,5,6,6,6]

orb = dest_to_orb(Dest)

print("The data of the triangulation is")

print(Dest)

show_triangulation(orb.Tetrahedra)

print("The isometries are")

print(orb.isometries())
"""


"""
Now let's do some testing for my canonize function, found in The_Algorithm.py.
"""
"""
Dest = [0,1,1,0,1,0,0,2,3,2,2,1,2,3,3,3]
orb = dest_to_orb(Dest)
show_triangulation(orb.Tetrahedra)
print(orb.isometries())
canonical_orb = canonize(orb)
print(canonical_orb.is_canonical)
print(canonical_orb.DestSeq)
print(canonical_orb.PachnerPath)
show_triangulation(canonical_orb.Tetrahedra)
print(" ")
print(canonical_orb.isometries())
"""

"""
Dest = [0,0,0,0]
orb = dest_to_orb(Dest)
canonical_orb = canonize(orb)
"""
"""
Dest = [0,1,2,3,2,2,0,2,1,0,1,1,4,3,3,0,3,4,4,4]
orb = dest_to_orb(Dest)
canonical_orb = canonize(orb)
"""
"""
Dest = [0,1,2,1,2,3,0,0,1,0,4,2,4,5,1,4,3,2,5,3,5,4,3,6,7,6,6,5,6,7,7,7]
orb = dest_to_orb(Dest)
canonical_orb = canonize(orb)
print(canonical_orb.DestSeq)
print(canonical_orb.PachnerPath)
show_triangulation(canonical_orb.Tetrahedra)
"""
"""
Dest = [0,1,2,3, 2,4,0,2, 1,0,5,1, 6,3,3,0, 5,7,1,8, 4,2,7,9, 3,6,6,6, 7,5,4,10, 
11,9,11,4, 12,13,8,5, 13,12,13,7, 8,8,12,12, 9,11,10,11, 10,10,9,13]
orb = dest_to_orb(Dest)
canonical_orb = canonize(orb)
# this is the one where you get stuck if you only do 2-3 moves. And canonize gives the
# correct error message.
"""
"""
Dest = [0,1,2,0, 2,3,0,4, 1,0,5,6, 5,7,1,5, 8,6,6,1, 3,2,7,3,
 9,4,4,2, 7,5,3,10, 4,9,9,9, 6,8,8,8, 11,10,10,7, 10,11,11,11]
orb = dest_to_orb(Dest)
canonical_orb = canonize(orb)
print(canonical_orb.DestSeq)
print(canonical_orb.PachnerPath)
show_triangulation(canonical_orb.Tetrahedra)
"""


"""
Dest = [0,1,2,0, 2,3,0,4, 1,0,5,6, 5,7,1,5, 8,6,6,1, 3,2,7,3,
 9,4,4,2, 7,5,3,10, 4,9,9,9, 6,8,8,8, 11,10,10,7, 10,11,11,11]
orb = dest_to_orb(Dest)

tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
tet2 = orb.Tetrahedra[2]

print(tet0.horotriangles)
print(tet1.horotriangles)
print(tet2.horotriangles)

next_orb = CuspedOrbifold(two_to_three(orb.Tetrahedra,tet0,F2))

tet0 = next_orb.Tetrahedra[0]
tet1 = next_orb.Tetrahedra[1]
tet2 = next_orb.Tetrahedra[2]

print(tet0.horotriangles)
print(tet1.horotriangles)
print(tet2.horotriangles)
"""

"""
with open("newly_canonical_dest_seqs.json", "r") as read_file:
    newly_canonical_dest_seqs = json.load(read_file)

for dest in newly_canonical_dest_seqs:
    if len(dest) == 32:
        print(dest)
"""

"""
with open("stuck_dest_seqs.json", "r") as read_file:
    stuck_dest_seqs = json.load(read_file)

Dest = stuck_dest_seqs[5]
orb = dest_to_orb(Dest)
print(proto_canonize(orb))
"""
"""
#print(orb.is_proto_canonical())
#orb.info()
tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
tet2 = orb.Tetrahedra[2]
#print(tet0.tilt(V3) + tet1.tilt(V2))
#print(orb.check_two_to_three(F3,tet0))
orb.two_to_three(F3,tet0)
#orb.info()
#print(orb.is_proto_canonical())
tet0 = orb.Tetrahedra[0]
tet1 = orb.Tetrahedra[1]
print(tet0.tilt(V2) + tet1.tilt(V1))
print(orb.check_two_to_three(F2,tet0))
orb.two_to_three(F2,tet0)
orb.info()
print(attempt_cancellation(orb))
orb.info()
print(orb.is_proto_canonical())
"""


"""
For dest = stuck_dest_seqs[5], we can do one 2-3 move then we get stuck, can't do more 2-3 moves
because of large dihedral angles. But one angle sum is actually pi, resulting in a flat quad face,
and it turns out we can do a modified 2-3 move, modified in the sense that we can just remove the flat
tetrahedron resulting from the 2-3 move. See my notebook for more info. I constructed by hand the resulting 
triangulation, here it is.
"""
"""
tet0 = Tetrahedron()
tet0.Index = 0
tet1 = Tetrahedron()
tet1.Index = 1

tet0.attach(F0,tet1,(1,0,2,3))
tet0.attach(F1,tet1,(1,3,0,2))
tet0.attach(F2,tet1,(1,3,0,2))
tet0.attach(F3,tet1,(1,3,0,2))

a = SquareRootCombination.One()
b = SquareRootCombination([(3,Fraction(1,3))])
tet0.fill_edge_params(ComplexSquareRootCombination(a,b))

a = SquareRootCombination.Zero()
b = SquareRootCombination([(3,Fraction(1,3))])
tet1.fill_edge_params(ComplexSquareRootCombination(a,b))

orb = CuspedOrbifold([tet0,tet1])

show_triangulation(orb.Tetrahedra)
print(orb.is_canonical)
print((tet0.tilt(V0) + tet1.tilt(V1)).evaluate() > 0)
print((tet0.tilt(V1) + tet1.tilt(V3)).evaluate())
print((tet0.tilt(V2) + tet1.tilt(V0)).evaluate())
print((tet0.tilt(V3) + tet1.tilt(V2)).evaluate())

print(orb.Vertices)
print(orb.Vertices[0].Corners)
print(orb.Vertices[1].Corners)
"""
"""
I believe the following is for stuck_dest_seqs[6]. It's very similar to the above, you get stuck,
but can do a flat_two_to_three move, this is the resulting triangulation, by hand. It's canonical.
"""
"""
tet0 = Tetrahedron()
tet0.Index = 0
tet1 = Tetrahedron()
tet1.Index = 1

tet0.attach(F0,tet1,(1,3,0,2))
tet0.attach(F1,tet1,(1,3,0,2))
tet0.attach(F2,tet1,(1,3,0,2))
tet0.attach(F3,tet1,(1,3,0,2))

a = SquareRootCombination.One()
b = SquareRootCombination([(3,Fraction(1,3))])
tet0.fill_edge_params(ComplexSquareRootCombination(a,b))

a = SquareRootCombination.Zero()
b = SquareRootCombination([(3,Fraction(1,3))])
tet1.fill_edge_params(ComplexSquareRootCombination(a,b))

orb = CuspedOrbifold([tet0,tet1])

print(orb.is_canonical)
show_triangulation(orb.Tetrahedra)

print(orb.Vertices)
print(orb.Vertices[0].Corners)
print(orb.Vertices[1].Corners)
print(orb.Vertices[2].Corners)
print(orb.Vertices[3].Corners)
"""



"""
We get canonical decomp data for covers of different Q pi tildes. The Q pi tildes are O4, O5, O8_0, O8_1,
O14_0, and O14_1. From this we get the isometry groups of the covers, which is the main point of this. 
Because we know we can quotient some of these out by isometries to get some orbifolds not in C_main.
"""

O4 = [0, 1, 1, 0, 1, 0, 0, 2, 3, 2, 2, 1, 2, 3, 3, 3]

covers_of_O4 = [[1, 2, 2, 1, 0, 3, 3, 0, 3, 0, 0, 4, 2, 1, 1, 5, 6, 5, 5, 2, 7, 4, 4, 3, 4, 7, 7, 7, 5, 6, 6, 6],[0, 1, 1, 2, 1, 0, 0, 3, 4, 5, 5, 0, 6, 7, 7, 1, 2, 8, 8, 4, 8, 2, 2, 7, 3, 9, 9, 6, 9, 3, 3, 5, 5, 4, 4, 10, 7, 6, 6, 11, 11, 10, 10, 8, 10, 11, 11, 9]
,[0, 1, 2, 0, 2, 3, 0, 4, 1, 0, 5, 6, 5, 7, 1, 5, 8, 6, 6, 1, 3, 2, 7, 3, 9, 4, 4, 2, 7, 5, 3, 10, 4, 9, 9, 9, 6, 8, 8, 8, 11, 10, 10, 7, 10, 11, 11, 11]
,[0, 1, 2, 3, 2, 3, 0, 4, 1, 0, 5, 6, 5, 7, 1, 0, 8, 4, 4, 1, 3, 2, 7, 5, 9, 10, 10, 2, 7, 5, 3, 10, 4, 8, 8, 9, 6, 11, 11, 8, 11, 6, 6, 7, 10, 9, 9, 11]
,[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 3, 6, 4, 2, 7, 0, 3, 7, 1, 4, 8, 9, 9, 1, 10, 6, 6, 2, 7, 3, 4, 9, 5, 11, 11, 10, 11, 5, 5, 7, 6, 10, 10, 8, 9, 8, 8, 11]
,[0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 12, 8, 5, 14, 15, 15, 7, 8, 16, 13, 13, 16, 8, 9, 15, 9, 11, 16, 11, 10, 17, 17, 14, 17, 10, 10, 12, 12, 13, 11, 18, 15, 14, 14, 19, 19, 18, 18, 16, 18, 19, 19, 17]
,[0, 1, 2, 3, 2, 4, 0, 1, 1, 0, 5, 6, 7, 8, 9, 0, 5, 10, 1, 9, 4, 2, 10, 11, 6, 12, 13, 2, 3, 14, 15, 7, 15, 9, 3, 13, 14, 3, 8, 4, 10, 5, 4, 16, 17, 18, 19, 5, 13, 20, 6, 19, 12, 6, 16, 8, 9, 15, 7, 17, 8, 7, 14, 21, 20, 13, 22, 10, 11, 21, 23, 14, 23, 19, 11, 22, 21, 11, 18, 12, 16, 22, 12, 20, 19, 23, 17, 15, 22, 16, 20, 18, 18, 17, 21, 23]
,[1, 2, 2, 2, 0, 3, 3, 4, 3, 0, 0, 0, 2, 1, 1, 5, 5, 6, 7, 1, 4, 8, 9, 3, 9, 10, 4, 9, 8, 4, 11, 8, 7, 12, 5, 7, 6, 5, 13, 6, 13, 14, 6, 15, 12, 7, 14, 16, 11, 17, 8, 18, 10, 9, 17, 19, 17, 11, 10, 17, 20, 19, 19, 10, 21, 18, 18, 11, 14, 13, 12, 14, 22, 16, 16, 12, 23, 15, 15, 13, 15, 23, 23, 23, 16, 22, 22, 22, 18, 21, 21, 21, 19, 20, 20, 20]
,[1, 2, 2, 3, 0, 4, 4, 5, 4, 0, 0, 6, 7, 8, 8, 0, 2, 1, 1, 9, 10, 11, 11, 1, 12, 13, 13, 2, 3, 14, 14, 10, 14, 3, 3, 13, 15, 16, 16, 4, 5, 17, 17, 7, 17, 5, 5, 16, 6, 18, 18, 15, 18, 6, 6, 8, 8, 7, 7, 19, 9, 20, 20, 12, 20, 9, 9, 11, 11, 10, 10, 21, 13, 12, 12, 22, 22, 21, 21, 14, 16, 15, 15, 23, 23, 19, 19, 17, 19, 23, 23, 18, 21, 22, 22, 20]
,[1, 2, 2, 3, 0, 4, 4, 5, 4, 0, 0, 6, 7, 8, 8, 0, 2, 1, 1, 9, 10, 11, 12, 1, 13, 14, 14, 2, 3, 15, 15, 10, 15, 3, 3, 14, 16, 17, 18, 4, 5, 18, 19, 7, 19, 20, 5, 18, 18, 5, 16, 17, 6, 21, 21, 16, 21, 6, 6, 8, 8, 7, 7, 20, 9, 12, 22, 13, 22, 23, 9, 12, 12, 9, 10, 11, 11, 10, 23, 22, 23, 22, 11, 15, 14, 13, 13, 23, 17, 16, 20, 19, 20, 19, 17, 21]
,[1, 2, 2, 3, 0, 4, 4, 5, 4, 0, 0, 6, 7, 8, 8, 0, 2, 1, 1, 9, 10, 11, 12, 1, 13, 14, 14, 2, 3, 15, 15, 10, 15, 3, 3, 14, 16, 17, 18, 4, 5, 19, 17, 7, 17, 16, 5, 18, 19, 5, 20, 17, 6, 21, 21, 16, 21, 6, 6, 8, 8, 7, 7, 20, 9, 22, 11, 13, 11, 10, 9, 12, 22, 9, 23, 11, 12, 23, 10, 22, 23, 12, 22, 15, 14, 13, 13, 23, 18, 20, 16, 19, 20, 18, 19, 21]
,[0, 1, 2, 3, 2, 4, 0, 1, 1, 0, 5, 6, 7, 8, 9, 0, 5, 10, 1, 9, 4, 2, 10, 11, 6, 12, 13, 2, 3, 14, 15, 7, 15, 16, 3, 13, 14, 3, 17, 4, 10, 5, 4, 18, 19, 17, 16, 5, 13, 20, 6, 16, 12, 6, 21, 8, 9, 22, 7, 19, 8, 7, 23, 23, 23, 11, 8, 12, 22, 9, 11, 24, 25, 24, 24, 10, 11, 23, 22, 14, 21, 26, 12, 21, 20, 13, 26, 20, 17, 19, 14, 27, 16, 15, 19, 15, 28, 18, 18, 17, 18, 28, 28, 25, 26, 21, 20, 29, 30, 27, 27, 22, 24, 25, 25, 30, 31, 29, 29, 26, 27, 30, 30, 28, 29, 31, 31, 31]
,[0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 14, 8, 5, 15, 16, 17, 7, 8, 18, 13, 13, 18, 8, 19, 16, 9, 11, 20, 11, 20, 21, 9, 17, 10, 17, 22, 15, 22, 23, 10, 12, 17, 10, 15, 14, 12, 24, 11, 25, 24, 12, 21, 26, 14, 13, 25, 20, 25, 19, 14, 22, 16, 15, 23, 21, 23, 22, 16, 27, 19, 25, 18, 28, 21, 20, 24, 18, 29, 27, 27, 19, 30, 26, 26, 23, 31, 28, 28, 24, 26, 30, 30, 31, 27, 29, 29, 30, 28, 31, 31, 29]
,[0, 1, 1, 2, 1, 0, 0, 3, 4, 5, 6, 0, 7, 8, 9, 1, 2, 10, 11, 4, 11, 12, 2, 9, 10, 2, 13, 8, 3, 14, 15, 7, 15, 16, 3, 6, 14, 3, 17, 5, 6, 18, 4, 19, 5, 4, 20, 21, 20, 22, 5, 23, 18, 6, 22, 24, 9, 25, 7, 26, 8, 7, 27, 28, 27, 29, 8, 30, 25, 9, 29, 31, 13, 32, 10, 18, 28, 21, 33, 10, 12, 11, 32, 20, 26, 33, 19, 11, 32, 13, 12, 29, 23, 31, 31, 12, 24, 30, 30, 13, 17, 34, 14, 25, 21, 28, 35, 14, 16, 15, 34, 27, 19, 35, 26, 15, 34, 17, 16, 22, 30, 24, 24, 16, 31, 23, 23, 17, 22, 20, 18, 33, 35, 19, 21, 32, 29, 27, 25, 35, 33, 26, 28, 34]
,[0, 1, 1, 2, 1, 0, 0, 3, 4, 5, 6, 0, 7, 8, 9, 1, 2, 10, 11, 4, 11, 12, 2, 9, 10, 2, 13, 8, 3, 14, 15, 7, 15, 16, 3, 6, 14, 3, 17, 5, 6, 18, 4, 19, 5, 4, 20, 21, 20, 22, 5, 23, 18, 6, 22, 24, 9, 25, 7, 26, 8, 7, 27, 28, 27, 29, 8, 30, 25, 9, 29, 31, 13, 32, 10, 20, 28, 21, 21, 10, 12, 11, 32, 18, 26, 19, 19, 11, 32, 13, 12, 29, 24, 31, 31, 12, 23, 30, 30, 13, 17, 33, 14, 27, 21, 28, 28, 14, 16, 15, 33, 25, 19, 26, 26, 15, 33, 17, 16, 22, 31, 24, 24, 16, 30, 23, 23, 17, 22, 20, 18, 34, 29, 27, 25, 35, 35, 34, 34, 32, 34, 35, 35, 33]
,[0, 1, 2, 0, 2, 3, 0, 4, 1, 0, 5, 6, 5, 7, 1, 8, 9, 6, 10, 1, 3, 2, 7, 11, 12, 13, 4, 2, 7, 5, 3, 14, 15, 16, 17, 3, 4, 18, 12, 12, 18, 4, 19, 16, 20, 17, 21, 5, 6, 9, 22, 9, 22, 23, 6, 21, 24, 25, 25, 7, 8, 26, 27, 20, 27, 28, 8, 10, 26, 8, 11, 25, 10, 29, 9, 29, 29, 10, 23, 27, 11, 30, 26, 15, 30, 11, 28, 13, 13, 12, 31, 31, 31, 19, 13, 30, 14, 32, 32, 24, 32, 14, 14, 17, 17, 20, 15, 33, 16, 15, 34, 19, 34, 21, 16, 34, 19, 31, 18, 18, 21, 34, 20, 23, 23, 22, 29, 22, 25, 24, 24, 35, 35, 33, 33, 26, 28, 27, 30, 28, 33, 35, 35, 32]
,[0, 1, 2, 0, 2, 3, 0, 4, 1, 0, 5, 6, 5, 7, 1, 8, 9, 6, 10, 1, 3, 2, 7, 11, 12, 13, 4, 2, 7, 5, 3, 14, 15, 16, 17, 3, 4, 18, 12, 12, 18, 4, 19, 16, 20, 21, 22, 5, 6, 9, 23, 9, 23, 24, 6, 22, 25, 26, 27, 7, 8, 17, 28, 20, 28, 29, 8, 10, 17, 8, 15, 26, 10, 30, 9, 30, 30, 10, 24, 28, 11, 31, 21, 15, 21, 20, 11, 27, 31, 11, 32, 13, 13, 12, 33, 33, 33, 19, 13, 31, 14, 34, 35, 25, 35, 27, 14, 17, 34, 14, 26, 21, 16, 15, 29, 19, 29, 28, 16, 29, 19, 33, 18, 18, 22, 32, 20, 24, 32, 22, 31, 32, 24, 23, 30, 23, 27, 35, 25, 34, 26, 25, 34, 35]
,[0, 1, 2, 3, 2, 4, 0, 1, 1, 0, 5, 6, 7, 8, 9, 0, 5, 10, 1, 9, 4, 2, 10, 11, 6, 12, 13, 2, 3, 14, 15, 7, 15, 16, 3, 13, 14, 3, 17, 4, 10, 5, 4, 18, 19, 20, 21, 5, 13, 22, 6, 21, 12, 6, 23, 8, 9, 24, 7, 19, 8, 7, 25, 26, 25, 27, 8, 28, 24, 9, 27, 29, 30, 29, 31, 10, 11, 26, 32, 14, 32, 21, 11, 31, 26, 11, 20, 12, 23, 28, 12, 33, 22, 13, 28, 23, 17, 34, 14, 24, 16, 15, 34, 25, 21, 32, 19, 15, 34, 17, 16, 35, 28, 23, 22, 16, 29, 30, 18, 17, 18, 35, 29, 30, 35, 18, 33, 20, 20, 19, 26, 34, 33, 31, 35, 22, 27, 25, 24, 32, 31, 33, 30, 27]
,[0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 14, 8, 5, 15, 16, 17, 7, 8, 18, 13, 13, 18, 8, 19, 16, 9, 11, 20, 11, 20, 21, 9, 17, 10, 22, 23, 15, 23, 24, 10, 12, 22, 10, 25, 14, 12, 26, 11, 26, 26, 12, 21, 23, 14, 13, 27, 27, 27, 19, 14, 22, 17, 28, 15, 21, 16, 15, 29, 19, 29, 30, 16, 29, 28, 17, 30, 28, 19, 27, 18, 18, 21, 20, 26, 20, 25, 31, 22, 25, 24, 23, 31, 24, 31, 25, 24, 32, 30, 29, 28, 33, 34, 33, 33, 30, 35, 32, 32, 31, 32, 35, 35, 35, 33, 34, 34, 34]
,[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 2, 7, 8, 9, 0, 6, 10, 1, 11, 5, 12, 13, 1, 4, 2, 10, 8, 3, 14, 15, 7, 15, 16, 3, 6, 14, 3, 17, 12, 10, 6, 4, 18, 19, 20, 21, 4, 13, 22, 5, 9, 12, 5, 23, 20, 9, 24, 7, 25, 8, 7, 26, 19, 26, 27, 8, 28, 24, 9, 27, 29, 30, 31, 28, 10, 11, 32, 25, 15, 25, 21, 11, 13, 32, 11, 20, 31, 23, 29, 12, 22, 22, 13, 29, 33, 17, 34, 14, 24, 20, 19, 32, 14, 16, 15, 34, 26, 34, 17, 16, 35, 28, 18, 30, 16, 29, 23, 22, 17, 18, 28, 35, 30, 35, 33, 18, 21, 21, 25, 19, 34, 33, 35, 31, 23, 27, 26, 24, 32, 31, 30, 33, 27]
,[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 7, 8, 9, 9, 0, 6, 10, 1, 11, 12, 13, 14, 1, 4, 2, 10, 15, 16, 17, 13, 2, 3, 18, 18, 8, 18, 3, 3, 13, 10, 6, 4, 19, 20, 21, 21, 4, 5, 22, 23, 16, 23, 7, 5, 9, 22, 5, 19, 21, 24, 25, 25, 6, 7, 23, 26, 12, 26, 19, 7, 25, 9, 8, 8, 27, 28, 14, 17, 10, 11, 29, 29, 24, 29, 11, 11, 14, 14, 28, 12, 30, 13, 12, 16, 31, 15, 32, 32, 20, 32, 15, 15, 17, 17, 16, 28, 33, 31, 27, 27, 18, 19, 26, 22, 28, 21, 20, 20, 34, 34, 33, 33, 22, 27, 31, 31, 23, 25, 24, 24, 35, 35, 30, 30, 26, 30, 35, 35, 29, 33, 34, 34, 32]
,[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 7, 8, 9, 9, 0, 6, 10, 1, 11, 12, 13, 14, 1, 4, 2, 10, 15, 16, 17, 13, 2, 3, 18, 18, 8, 18, 3, 3, 13, 10, 6, 4, 19, 20, 21, 22, 4, 5, 23, 24, 16, 24, 7, 5, 9, 23, 5, 25, 21, 26, 27, 28, 6, 7, 24, 29, 12, 29, 25, 7, 28, 9, 8, 8, 30, 25, 29, 23, 10, 11, 31, 32, 26, 32, 28, 11, 14, 31, 11, 27, 29, 14, 19, 12, 27, 13, 12, 16, 33, 19, 14, 17, 25, 15, 34, 35, 20, 35, 22, 15, 23, 34, 15, 21, 17, 17, 16, 19, 22, 33, 30, 30, 18, 22, 35, 20, 34, 21, 20, 34, 35, 30, 33, 33, 24, 28, 32, 26, 31, 27, 26, 31, 32]
,[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 7, 8, 9, 10, 0, 6, 11, 1, 12, 13, 14, 15, 1, 4, 2, 11, 16, 17, 15, 18, 2, 3, 19, 20, 8, 20, 12, 3, 18, 19, 3, 16, 14, 11, 6, 4, 21, 22, 23, 9, 4, 5, 24, 25, 17, 25, 21, 5, 10, 24, 5, 7, 23, 26, 10, 23, 6, 7, 27, 24, 13, 27, 7, 21, 9, 10, 26, 8, 28, 9, 8, 22, 29, 30, 18, 14, 11, 12, 20, 31, 26, 31, 16, 12, 15, 15, 17, 13, 32, 14, 13, 30, 33, 16, 31, 19, 22, 18, 30, 17, 34, 33, 29, 29, 19, 34, 28, 28, 20, 21, 25, 27, 30, 23, 22, 26, 35, 35, 32, 32, 24, 28, 34, 34, 25, 29, 33, 33, 27, 32, 35, 35, 31]]


O5 = [0, 1, 2, 3, 2, 2, 0, 2, 1, 0, 1, 1, 4, 3, 3, 0, 3, 4, 4, 4]

covers_of_O5 = [[1, 1, 2, 1, 0, 3, 0, 0, 3, 0, 4, 5, 2, 6, 1, 7, 6, 2, 6, 6, 8, 7, 7, 2, 4, 4, 3, 4, 9, 5, 5, 3, 5, 9, 9, 9, 7, 8, 8, 8],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 7, 0, 8, 9, 8, 1, 10, 10, 9, 2, 3, 11, 11, 6, 11, 3, 3, 9, 4, 4, 12, 10, 12, 5, 4, 7, 5, 12, 5, 8, 7, 6, 6, 13, 9, 8, 10, 14, 14, 13, 13, 11, 13, 14, 14, 12],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 9, 1, 11, 11, 12, 2, 3, 13, 14, 6, 14, 8, 3, 12, 13, 3, 7, 10, 4, 4, 10, 11, 10, 9, 4, 8, 5, 12, 5, 9, 12, 5, 11, 7, 8, 14, 6, 13, 7, 6, 13, 14],
[0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 12, 8, 5, 14, 15, 15, 7, 8, 16, 13, 13, 16, 8, 9, 15, 9, 11, 16, 11, 10, 17, 17, 14, 17, 10, 10, 12, 12, 13, 11, 18, 15, 14, 14, 19, 19, 18, 18, 16, 18, 19, 19, 17],
[0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 14, 8, 5, 15, 16, 17, 7, 8, 12, 13, 13, 12, 8, 11, 16, 9, 11, 14, 11, 14, 13, 9, 17, 10, 18, 19, 15, 19, 17, 10, 12, 18, 10, 16, 14, 17, 19, 15, 18, 16, 15, 18, 19],
[1, 0, 0, 2, 0, 1, 1, 3, 4, 5, 6, 0, 7, 8, 9, 1, 2, 10, 11, 7, 11, 6, 2, 6, 10, 2, 5, 5, 3, 12, 13, 4, 13, 9, 3, 9, 12, 3, 8, 8, 6, 11, 4, 14, 5, 4, 10, 15, 9, 13, 7, 16, 8, 7, 12, 17, 15, 17, 18, 10, 14, 19, 16, 11, 17, 15, 19, 12, 16, 18, 14, 13, 19, 14, 17, 19, 18, 16, 15, 18],
[1, 0, 0, 2, 0, 1, 1, 3, 4, 5, 6, 0, 7, 8, 9, 1, 2, 10, 11, 7, 11, 6, 2, 6, 10, 2, 5, 5, 3, 12, 13, 4, 13, 13, 3, 9, 12, 3, 12, 8, 6, 11, 4, 14, 5, 4, 10, 15, 9, 9, 7, 16, 8, 7, 8, 17, 15, 17, 18, 10, 14, 19, 16, 11, 17, 15, 17, 12, 16, 16, 14, 13, 19, 14, 19, 19, 18, 18, 15, 18],
[1, 0, 0, 2, 0, 1, 1, 3, 4, 5, 6, 0, 7, 8, 9, 1, 2, 10, 11, 7, 11, 6, 2, 6, 10, 2, 5, 5, 3, 12, 13, 4, 13, 14, 3, 9, 12, 3, 15, 8, 6, 11, 4, 16, 5, 4, 10, 17, 9, 18, 7, 14, 8, 7, 19, 19, 19, 17, 8, 12, 18, 9, 17, 18, 17, 19, 18, 10, 16, 15, 14, 11, 15, 16, 12, 15, 14, 13, 16, 13],
[1, 0, 0, 2, 0, 1, 1, 3, 4, 5, 6, 0, 7, 8, 9, 1, 2, 10, 11, 7, 11, 6, 2, 6, 10, 2, 5, 5, 3, 12, 13, 4, 13, 14, 3, 9, 12, 3, 15, 8, 6, 11, 4, 16, 5, 4, 10, 17, 9, 18, 7, 18, 8, 7, 19, 15, 19, 16, 8, 19, 18, 9, 16, 13, 17, 15, 14, 10, 16, 19, 18, 11, 15, 17, 12, 12, 14, 13, 17, 14],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 7, 0, 8, 9, 10, 1, 11, 12, 9, 2, 3, 13, 13, 6, 13, 3, 3, 9, 4, 14, 15, 11, 15, 5, 4, 7, 14, 4, 16, 12, 5, 15, 17, 8, 17, 16, 5, 10, 7, 6, 6, 18, 10, 19, 8, 20, 9, 8, 11, 21, 19, 10, 12, 22, 12, 11, 19, 23, 21, 18, 18, 13, 16, 17, 14, 24, 23, 23, 25, 14, 18, 21, 21, 15, 26, 22, 22, 16, 20, 25, 20, 17, 27, 28, 28, 19, 25, 20, 23, 28, 22, 26, 26, 27, 24, 29, 29, 26, 29, 24, 24, 25, 28, 27, 27, 29],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 9, 1, 11, 11, 12, 2, 3, 13, 14, 6, 14, 8, 3, 12, 13, 3, 7, 10, 4, 4, 15, 11, 15, 16, 4, 8, 5, 17, 5, 9, 17, 5, 18, 7, 8, 14, 6, 19, 7, 6, 13, 20, 10, 9, 21, 22, 21, 21, 10, 18, 12, 23, 11, 24, 23, 12, 23, 16, 22, 20, 25, 13, 24, 25, 19, 14, 16, 15, 16, 26, 19, 27, 24, 15, 18, 18, 17, 28, 20, 22, 27, 17, 27, 19, 20, 25, 28, 28, 29, 21, 25, 24, 22, 29, 26, 29, 26, 23, 29, 26, 28, 27],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 9, 1, 11, 11, 12, 2, 3, 13, 14, 6, 14, 15, 3, 12, 13, 3, 16, 10, 4, 4, 10, 11, 10, 9, 4, 8, 5, 17, 5, 9, 17, 5, 18, 7, 8, 19, 6, 13, 7, 6, 20, 19, 20, 21, 7, 22, 19, 8, 21, 17, 12, 23, 11, 16, 23, 12, 23, 24, 16, 25, 13, 14, 15, 14, 25, 20, 25, 16, 15, 26, 22, 24, 27, 15, 18, 18, 17, 28, 27, 27, 22, 18, 21, 20, 19, 25, 26, 29, 28, 21, 24, 22, 24, 29, 29, 26, 29, 23, 28, 28, 26, 27],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 11, 1, 12, 13, 14, 2, 3, 15, 16, 6, 16, 8, 3, 14, 15, 3, 7, 10, 4, 17, 10, 12, 10, 9, 4, 8, 17, 4, 18, 13, 5, 14, 19, 9, 19, 20, 5, 11, 14, 5, 12, 7, 8, 16, 6, 15, 7, 6, 15, 16, 11, 18, 9, 21, 18, 11, 17, 22, 13, 12, 20, 23, 20, 19, 13, 24, 23, 23, 25, 17, 26, 27, 24, 18, 21, 25, 21, 19, 28, 22, 27, 20, 25, 21, 23, 27, 22, 28, 29, 26, 29, 24, 22, 25, 24, 29, 26, 28, 27, 26, 28, 29],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 11, 1, 12, 13, 14, 2, 3, 15, 16, 6, 16, 8, 3, 14, 15, 3, 7, 10, 4, 17, 18, 12, 18, 11, 4, 8, 17, 4, 10, 13, 5, 19, 20, 9, 20, 14, 5, 11, 19, 5, 13, 7, 8, 16, 6, 21, 7, 6, 15, 22, 11, 18, 9, 23, 10, 9, 17, 24, 14, 20, 12, 25, 13, 12, 19, 26, 24, 22, 27, 15, 25, 27, 21, 16, 26, 26, 28, 17, 21, 29, 25, 18, 22, 24, 29, 19, 23, 28, 23, 20, 29, 21, 22, 27, 28, 23, 26, 29, 27, 25, 24, 28],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 11, 1, 12, 13, 14, 2, 3, 15, 16, 6, 16, 17, 3, 14, 15, 3, 18, 10, 4, 19, 10, 12, 10, 9, 4, 8, 19, 4, 20, 13, 5, 21, 22, 9, 22, 14, 5, 11, 21, 5, 13, 7, 8, 23, 6, 15, 7, 6, 24, 23, 24, 25, 7, 20, 23, 8, 25, 21, 11, 20, 9, 26, 20, 11, 19, 17, 14, 22, 12, 18, 13, 12, 21, 27, 18, 28, 15, 16, 17, 16, 28, 24, 28, 18, 17, 29, 27, 27, 29, 19, 26, 29, 26, 22, 25, 24, 23, 28, 29, 26, 27, 25],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 11, 1, 12, 13, 14, 2, 3, 15, 16, 6, 16, 17, 3, 14, 15, 3, 18, 10, 4, 19, 20, 12, 20, 11, 4, 8, 19, 4, 10, 13, 5, 14, 21, 9, 21, 22, 5, 11, 14, 5, 12, 7, 8, 23, 6, 24, 7, 6, 24, 16, 24, 25, 7, 20, 23, 8, 25, 22, 11, 20, 9, 26, 10, 9, 19, 17, 13, 12, 22, 27, 22, 21, 13, 18, 18, 28, 15, 23, 17, 16, 28, 15, 28, 18, 17, 29, 27, 27, 29, 19, 26, 29, 26, 21, 25, 24, 23, 28, 29, 26, 27, 25],
[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 7, 8, 9, 10, 0, 6, 11, 1, 12, 13, 14, 13, 1, 4, 2, 11, 15, 16, 17, 18, 2, 3, 19, 20, 8, 20, 10, 3, 18, 19, 3, 9, 14, 11, 6, 4, 21, 17, 16, 22, 4, 5, 5, 23, 16, 23, 24, 5, 10, 24, 23, 24, 6, 7, 22, 12, 13, 12, 18, 7, 24, 22, 7, 17, 9, 10, 20, 8, 25, 9, 8, 19, 26, 27, 28, 29, 11, 18, 12, 16, 28, 14, 13, 15, 29, 15, 15, 14, 17, 29, 26, 27, 19, 28, 27, 25, 20, 21, 25, 26, 27, 26, 29, 21, 22, 25, 21, 28, 23],
[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 7, 8, 9, 10, 0, 6, 11, 1, 12, 13, 14, 13, 1, 4, 2, 11, 15, 16, 17, 18, 2, 3, 19, 20, 8, 20, 21, 3, 18, 19, 3, 22, 14, 11, 6, 4, 23, 17, 16, 24, 4, 5, 5, 25, 16, 25, 26, 5, 10, 26, 25, 26, 6, 7, 18, 12, 13, 12, 24, 7, 26, 18, 7, 16, 9, 10, 27, 8, 28, 9, 8, 28, 20, 28, 23, 9, 25, 27, 10, 23, 24, 29, 22, 21, 11, 24, 12, 17, 22, 14, 13, 15, 21, 15, 15, 14, 17, 22, 29, 19, 27, 21, 20, 29, 19, 23, 28, 27, 29],
[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 7, 8, 9, 10, 0, 6, 11, 1, 12, 13, 14, 15, 1, 4, 2, 11, 16, 17, 17, 18, 2, 3, 19, 20, 8, 20, 10, 3, 18, 19, 3, 9, 14, 11, 6, 4, 21, 22, 22, 23, 4, 5, 16, 24, 17, 24, 15, 5, 10, 16, 5, 14, 22, 15, 24, 13, 6, 7, 23, 7, 13, 23, 7, 22, 9, 10, 20, 8, 25, 9, 8, 19, 26, 27, 28, 29, 11, 12, 18, 12, 15, 18, 12, 17, 28, 14, 13, 16, 29, 29, 26, 27, 19, 28, 27, 25, 20, 21, 25, 26, 27, 26, 29, 21, 23, 25, 21, 28, 24],
[1, 1, 2, 1, 0, 3, 0, 0, 3, 0, 4, 5, 2, 6, 1, 7, 6, 2, 6, 8, 9, 10, 7, 2, 4, 4, 3, 11, 12, 5, 13, 3, 14, 14, 15, 4, 5, 12, 16, 12, 16, 17, 5, 15, 18, 19, 18, 6, 7, 20, 9, 9, 20, 7, 21, 19, 8, 22, 8, 18, 22, 8, 23, 10, 10, 9, 24, 24, 24, 21, 10, 22, 11, 11, 25, 14, 25, 26, 11, 13, 13, 27, 12, 27, 27, 13, 17, 25, 15, 28, 14, 17, 28, 15, 28, 28, 17, 16, 27, 16, 19, 18, 29, 21, 29, 29, 19, 29, 21, 24, 20, 20, 23, 23, 22, 23, 26, 25, 26, 26],
[1, 1, 2, 3, 0, 4, 0, 5, 4, 0, 6, 7, 8, 9, 8, 0, 2, 10, 1, 11, 12, 12, 13, 1, 10, 2, 10, 14, 15, 16, 16, 2, 3, 3, 17, 12, 17, 14, 3, 16, 6, 6, 4, 18, 19, 20, 20, 4, 5, 21, 5, 8, 21, 5, 18, 20, 22, 22, 9, 6, 7, 23, 23, 19, 23, 7, 7, 9, 9, 8, 22, 24, 25, 13, 25, 10, 11, 26, 26, 15, 26, 11, 11, 13, 13, 25, 12, 27, 14, 17, 14, 25, 16, 15, 15, 28, 28, 27, 27, 17, 18, 18, 21, 22, 20, 19, 19, 29, 29, 24, 24, 21, 24, 29, 29, 23, 27, 28, 28, 26],
[1, 1, 2, 3, 0, 4, 0, 5, 4, 0, 6, 7, 8, 9, 8, 0, 2, 10, 1, 11, 12, 12, 13, 1, 10, 2, 10, 14, 15, 16, 17, 2, 3, 3, 18, 12, 18, 19, 3, 17, 6, 6, 4, 20, 21, 22, 23, 4, 5, 24, 5, 8, 24, 5, 25, 22, 25, 25, 24, 6, 7, 26, 27, 21, 27, 23, 7, 24, 26, 7, 22, 9, 9, 8, 20, 23, 20, 20, 9, 25, 19, 18, 19, 10, 11, 28, 29, 15, 29, 17, 11, 13, 28, 11, 16, 18, 13, 14, 12, 16, 14, 13, 14, 19, 17, 29, 15, 28, 16, 15, 28, 29, 23, 27, 21, 26, 22, 21, 26, 27],
[1, 1, 2, 3, 0, 4, 0, 5, 4, 0, 6, 7, 8, 9, 10, 0, 2, 11, 1, 12, 13, 14, 15, 1, 11, 2, 11, 16, 17, 18, 18, 2, 3, 19, 20, 13, 20, 16, 3, 18, 19, 3, 21, 14, 6, 6, 4, 19, 22, 23, 23, 4, 5, 21, 16, 8, 16, 20, 5, 10, 21, 5, 19, 23, 14, 13, 9, 6, 7, 24, 24, 22, 24, 7, 7, 9, 10, 15, 8, 11, 9, 8, 14, 25, 15, 10, 13, 26, 12, 27, 27, 17, 27, 12, 12, 15, 18, 17, 17, 28, 28, 26, 26, 20, 29, 25, 25, 21, 23, 22, 22, 29, 25, 29, 29, 24, 26, 28, 28, 27],
[1, 1, 2, 3, 0, 4, 0, 5, 4, 0, 6, 7, 8, 9, 10, 0, 2, 11, 1, 12, 13, 14, 15, 1, 11, 2, 11, 16, 17, 18, 19, 2, 3, 20, 21, 13, 21, 10, 3, 19, 20, 3, 9, 14, 6, 6, 4, 20, 22, 23, 24, 4, 5, 25, 16, 8, 16, 15, 5, 10, 25, 5, 14, 23, 14, 13, 25, 6, 7, 26, 27, 22, 27, 24, 7, 25, 26, 7, 23, 9, 10, 21, 8, 11, 9, 8, 20, 24, 12, 28, 29, 17, 29, 19, 12, 15, 28, 12, 18, 21, 15, 16, 13, 18, 19, 29, 17, 28, 18, 17, 28, 29, 24, 27, 22, 26, 23, 22, 26, 27],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 7, 0, 8, 9, 10, 1, 11, 12, 9, 2, 3, 13, 13, 6, 13, 3, 3, 9, 4, 14, 15, 11, 15, 5, 4, 7, 14, 4, 16, 12, 5, 15, 17, 8, 17, 16, 5, 10, 7, 6, 6, 18, 10, 19, 8, 20, 9, 8, 11, 21, 19, 10, 12, 22, 12, 11, 19, 23, 21, 18, 18, 13, 16, 17, 14, 24, 23, 23, 25, 14, 18, 21, 21, 15, 26, 22, 22, 16, 20, 27, 20, 17, 28, 29, 30, 19, 27, 20, 31, 29, 22, 26, 26, 28, 25, 32, 23, 30, 24, 33, 34, 26, 34, 30, 24, 25, 33, 24, 29, 27, 32, 25, 32, 32, 31, 31, 27, 31, 30, 34, 28, 34, 29, 28, 33, 33],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 9, 1, 11, 11, 12, 2, 3, 13, 14, 6, 14, 15, 3, 12, 13, 3, 16, 10, 4, 4, 17, 11, 17, 18, 4, 8, 5, 19, 5, 9, 19, 5, 20, 7, 8, 21, 6, 21, 7, 6, 22, 23, 22, 24, 7, 25, 21, 8, 24, 17, 10, 9, 26, 16, 26, 26, 10, 26, 12, 27, 11, 24, 27, 12, 27, 28, 16, 23, 13, 13, 15, 14, 23, 29, 24, 22, 21, 14, 23, 16, 15, 19, 30, 28, 31, 15, 18, 17, 18, 18, 20, 20, 19, 31, 32, 32, 25, 20, 33, 29, 29, 22, 25, 34, 32, 33, 34, 25, 34, 27, 28, 30, 28, 34, 29, 33, 33, 30, 31, 31, 30, 32],
[0, 1, 2, 3, 2, 2, 0, 4, 1, 0, 1, 5, 6, 7, 8, 0, 9, 10, 9, 1, 11, 11, 12, 2, 3, 13, 14, 6, 14, 15, 3, 12, 13, 3, 16, 10, 4, 4, 17, 11, 17, 18, 4, 8, 5, 19, 5, 9, 19, 5, 20, 7, 8, 21, 6, 22, 7, 6, 23, 23, 23, 24, 7, 19, 21, 8, 24, 25, 10, 9, 26, 24, 26, 26, 10, 27, 12, 28, 11, 15, 28, 12, 28, 28, 16, 22, 13, 29, 24, 23, 21, 13, 15, 14, 22, 14, 22, 16, 15, 17, 30, 31, 27, 16, 18, 17, 18, 31, 32, 25, 32, 18, 20, 20, 19, 20, 33, 29, 29, 21, 25, 32, 34, 33, 34, 34, 25, 26, 27, 27, 30, 34, 29, 33, 33, 30, 31, 30, 31, 32]]


O8_0 = [0, 1, 2, 1, 2, 3, 0, 0, 1, 0, 4, 2, 4, 5, 1, 4, 3, 2, 5, 3, 5, 4, 3, 6, 7, 6, 6, 5, 6, 7, 7, 7]

covers_of_O8_0 = [[1, 2, 2, 2, 0, 3, 3, 4, 3, 0, 0, 0, 2, 1, 1, 5, 5, 6, 7, 1, 4, 8, 9, 3, 9, 10, 4, 9, 8, 4, 11, 8, 7, 12, 5, 7, 6, 5, 13, 6, 13, 14, 6, 12, 12, 7, 14, 14, 11, 15, 8, 10, 10, 9, 15, 15, 15, 11, 10, 11, 14, 13, 12, 13],
[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 2, 7, 8, 9, 0, 6, 10, 1, 11, 5, 12, 13, 1, 4, 2, 10, 8, 3, 9, 14, 7, 14, 15, 3, 6, 9, 3, 7, 12, 10, 6, 4, 16, 17, 13, 18, 4, 13, 17, 5, 9, 12, 5, 11, 13, 8, 7, 15, 17, 15, 14, 8, 19, 20, 21, 19, 10, 11, 18, 12, 14, 18, 11, 17, 21, 22, 16, 21, 15, 16, 22, 23, 20, 23, 19, 16, 18, 19, 23, 20, 22, 21, 20, 22, 23],
[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 7, 8, 9, 9, 0, 6, 10, 1, 11, 12, 13, 14, 1, 4, 2, 10, 15, 16, 17, 13, 2, 3, 18, 18, 8, 18, 3, 3, 13, 10, 6, 4, 19, 14, 20, 12, 4, 5, 11, 21, 16, 21, 7, 5, 9, 11, 5, 15, 20, 20, 14, 17, 6, 7, 21, 19, 12, 19, 15, 7, 17, 9, 8, 8, 22, 17, 16, 20, 10, 15, 19, 11, 14, 13, 12, 16, 23, 23, 22, 22, 18, 22, 23, 23, 21],
[0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 14, 8, 5, 15, 16, 17, 7, 8, 18, 13, 13, 18, 8, 19, 16, 9, 11, 20, 11, 20, 21, 9, 17, 10, 17, 22, 15, 22, 23, 10, 12, 17, 10, 15, 14, 12, 24, 11, 25, 24, 12, 21, 26, 14, 13, 25, 20, 25, 19, 14, 22, 16, 15, 23, 21, 23, 22, 16, 27, 19, 25, 18, 28, 21, 20, 24, 18, 29, 27, 27, 19, 30, 26, 26, 23, 31, 28, 28, 24, 26, 30, 30, 31, 27, 29, 29, 30, 28, 31, 31, 29],
[1, 0, 0, 2, 0, 1, 1, 3, 4, 5, 6, 0, 7, 8, 9, 1, 2, 10, 11, 7, 11, 6, 2, 6, 10, 2, 5, 5, 3, 12, 13, 4, 13, 14, 3, 9, 12, 3, 15, 8, 6, 11, 4, 16, 5, 4, 10, 17, 9, 18, 7, 19, 8, 7, 20, 21, 20, 22, 8, 23, 18, 9, 22, 24, 17, 21, 25, 10, 16, 26, 19, 11, 15, 27, 12, 28, 21, 17, 29, 12, 14, 13, 27, 27, 19, 28, 16, 13, 27, 15, 14, 30, 30, 24, 26, 14, 31, 29, 23, 15, 26, 16, 30, 26, 25, 23, 17, 25, 22, 20, 18, 20, 29, 31, 21, 18, 28, 19, 24, 31, 23, 25, 31, 22, 24, 30, 28, 29]]


O8_1 = [0,1,2,2,2,3,0,1,1,0,4,0,4,5,1,4,3,2,5,3,5,4,3,6,7,6,6,5,6,7,7,7]

covers_of_O8_1 = [[1, 2, 2, 2, 0, 3, 3, 4, 3, 0, 0, 0, 2, 1, 1, 5, 5, 6, 7, 1, 4, 8, 9, 3, 9, 10, 4, 9, 8, 4, 11, 8, 7, 12, 5, 7, 6, 5, 13, 6, 13, 14, 6, 14, 12, 7, 14, 13, 11, 15, 8, 15, 10, 9, 15, 11, 15, 11, 10, 10, 14, 13, 12, 12],
[0, 1, 2, 3, 2, 4, 0, 1, 1, 0, 5, 6, 7, 8, 9, 0, 5, 10, 1, 9, 4, 2, 10, 11, 6, 12, 13, 2, 3, 14, 8, 7, 8, 7, 3, 13, 14, 3, 15, 4, 10, 5, 4, 16, 17, 18, 12, 5, 13, 11, 6, 12, 12, 6, 17, 8, 9, 15, 7, 17, 15, 9, 14, 19, 20, 19, 21, 10, 11, 13, 18, 14, 18, 17, 11, 21, 22, 21, 16, 15, 16, 23, 22, 20, 23, 16, 19, 18, 19, 20, 23, 22, 21, 22, 20, 23],
[0, 1, 2, 3, 2, 4, 0, 5, 1, 0, 6, 7, 8, 9, 9, 0, 6, 10, 1, 11, 12, 13, 14, 1, 4, 2, 10, 15, 16, 17, 13, 2, 3, 18, 18, 8, 18, 3, 3, 13, 10, 6, 4, 19, 20, 14, 17, 4, 5, 19, 21, 16, 21, 7, 5, 9, 19, 5, 11, 14, 17, 16, 20, 6, 7, 21, 15, 12, 15, 11, 7, 20, 9, 8, 8, 22, 14, 20, 12, 10, 11, 15, 19, 17, 13, 12, 16, 23, 23, 22, 22, 18, 22, 23, 23, 21],
[0, 1, 2, 3, 2, 4, 0, 1, 1, 0, 5, 6, 7, 8, 9, 0, 5, 10, 1, 9, 4, 2, 10, 11, 6, 12, 13, 2, 3, 14, 15, 7, 15, 16, 3, 13, 14, 3, 17, 4, 10, 5, 4, 18, 19, 17, 16, 5, 13, 20, 6, 16, 12, 6, 21, 8, 9, 22, 7, 19, 8, 7, 23, 23, 23, 11, 8, 12, 22, 9, 11, 24, 25, 24, 24, 10, 11, 23, 22, 14, 21, 26, 12, 21, 20, 13, 26, 20, 17, 19, 14, 27, 16, 15, 19, 15, 28, 18, 18, 17, 18, 28, 28, 25, 26, 21, 20, 29, 30, 27, 27, 22, 24, 25, 25, 30, 31, 29, 29, 26, 27, 30, 30, 28, 29, 31, 31, 31],
[1, 0, 0, 2, 0, 1, 1, 3, 4, 5, 6, 0, 7, 8, 9, 1, 2, 10, 11, 7, 11, 6, 2, 6, 10, 2, 5, 5, 3, 12, 13, 4, 13, 14, 3, 9, 12, 3, 15, 8, 6, 11, 4, 16, 5, 4, 10, 17, 9, 18, 7, 19, 8, 7, 20, 21, 20, 22, 8, 23, 18, 9, 22, 24, 17, 21, 25, 10, 16, 26, 19, 11, 15, 27, 12, 27, 21, 17, 28, 12, 14, 13, 27, 28, 19, 29, 16, 13, 27, 15, 14, 30, 31, 24, 29, 14, 30, 25, 23, 15, 26, 16, 24, 26, 25, 30, 17, 25, 22, 20, 18, 18, 29, 19, 31, 20, 28, 23, 21, 31, 24, 31, 26, 22, 23, 28, 30, 29]]


O14_0 = [0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 11, 4, 12, 13, 8, 5, 13, 12, 13, 7, 8, 8, 12, 12, 9, 11, 10, 11, 10, 10, 9, 13]

covers_of_O14_0 = [[0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 14, 8, 5, 15, 16, 14, 7, 8, 17, 13, 13, 17, 8, 16, 16, 9, 11, 18, 11, 18, 10, 9, 14, 10, 18, 19, 15, 19, 12, 10, 12, 12, 19, 11, 20, 14, 13, 15, 21, 16, 15, 17, 22, 22, 21, 23, 17, 21, 22, 20, 18, 20, 24, 21, 19, 24, 20, 25, 24, 23, 25, 22, 23, 25, 23, 24, 26, 27, 26, 26, 25, 26, 27, 27, 27],
[1, 1, 2, 2, 0, 3, 0, 4, 3, 0, 5, 0, 2, 6, 1, 7, 7, 8, 9, 1, 6, 2, 6, 8, 5, 5, 3, 10, 4, 11, 12, 3, 12, 13, 4, 5, 11, 4, 14, 11, 15, 15, 16, 6, 9, 17, 7, 9, 8, 7, 18, 15, 18, 19, 8, 16, 17, 9, 19, 20, 10, 21, 10, 12, 21, 10, 22, 13, 14, 23, 11, 24, 13, 12, 23, 22, 23, 14, 13, 23, 25, 24, 24, 14, 16, 26, 15, 26, 26, 16, 26, 18, 19, 18, 17, 19, 27, 20, 20, 17, 20, 27, 27, 27, 22, 22, 21, 21, 24, 25, 25, 25],
[1, 2, 2, 2, 0, 3, 3, 4, 3, 0, 0, 0, 2, 1, 1, 5, 5, 6, 7, 1, 4, 8, 9, 3, 9, 10, 4, 9, 8, 4, 11, 8, 7, 12, 5, 7, 6, 5, 13, 6, 13, 14, 6, 15, 12, 7, 14, 16, 11, 17, 8, 18, 10, 9, 17, 19, 17, 11, 10, 20, 21, 19, 22, 10, 23, 24, 18, 11, 14, 13, 12, 25, 22, 16, 21, 12, 26, 27, 15, 13, 24, 23, 27, 14, 15, 18, 26, 26, 18, 15, 23, 23, 16, 22, 20, 22, 20, 25, 16, 27, 27, 26, 24, 17, 19, 21, 25, 21, 25, 20, 19, 24]]


O14_1 = [0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 13, 8, 5, 12, 12, 11, 7, 8, 10, 13, 13, 10, 8, 10, 12, 9, 11, 9, 11]


covers_of_O14_1 = [[0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 11, 9, 12, 4, 13, 14, 8, 5, 15, 12, 16, 7, 8, 17, 13, 13, 17, 8, 10, 12, 9, 11, 18, 11, 18, 16, 9, 16, 10, 19, 17, 15, 19, 10, 14, 14, 12, 15, 11, 20, 14, 13, 19, 21, 16, 18, 15, 22, 20, 21, 22, 17, 22, 23, 20, 18, 21, 20, 24, 19, 24, 25, 21, 24, 23, 22, 25, 23, 25, 24, 23, 26, 27, 26, 26, 25, 26, 27, 27, 27],
[1, 1, 2, 3, 0, 4, 0, 4, 4, 0, 5, 6, 6, 7, 8, 0, 2, 9, 1, 1, 9, 2, 9, 10, 3, 11, 12, 2, 12, 13, 3, 12, 11, 3, 14, 9, 5, 5, 4, 8, 15, 16, 15, 5, 8, 17, 6, 15, 7, 6, 18, 7, 18, 19, 7, 20, 17, 8, 19, 16, 10, 10, 21, 11, 21, 22, 10, 14, 14, 23, 11, 22, 13, 12, 23, 24, 23, 14, 13, 23, 25, 24, 24, 13, 16, 15, 26, 26, 26, 26, 16, 17, 19, 18, 17, 19, 27, 20, 20, 18, 20, 27, 27, 27, 22, 21, 22, 21, 24, 25, 25, 25],
[1, 2, 2, 2, 0, 3, 3, 4, 3, 0, 0, 0, 2, 1, 1, 5, 5, 6, 7, 1, 4, 8, 9, 3, 9, 10, 4, 9, 8, 4, 11, 8, 7, 12, 5, 7, 6, 5, 13, 6, 13, 14, 6, 15, 12, 7, 14, 16, 11, 17, 8, 18, 10, 9, 17, 19, 17, 11, 10, 20, 21, 19, 22, 10, 23, 24, 18, 11, 14, 13, 12, 25, 26, 16, 27, 12, 24, 23, 15, 13, 22, 27, 21, 14, 15, 20, 24, 24, 20, 15, 25, 27, 16, 26, 19, 26, 19, 21, 16, 21, 27, 22, 26, 17, 18, 25, 23, 23, 25, 18, 20, 22],]


"""
for dest in covers_of_O5:
    orb = dest_to_orb(dest)
    orb.info()
    print(' ')
    print(orb.isometriesOP())
    print(' ')
    print(simplicial_maps_OP(orb,orb))
    print(' ')
    print('------------------------------------------------------')
    print(' ')
"""


"""
print("This file has info about covers of O5.")
print(' ')
dest = O5
Dests = covers_of_O5
print(dest)
orb = dest_to_orb(dest)

#Comment this out depending on the properties of this Q pi tilde.
print(' ')
print("Its original regular tet triangulation is proto-canonical, but not canonical. Remove a face to get a regular cube.")
print(' ')
orb.info()
print(' ')
for tet in orb.Tetrahedra:
    for two_subsimplex in TwoSubsimplices:
        if transparent_face(two_subsimplex,tet):
            print('Face',FaceIndex[two_subsimplex],'of tet',tet,'is transparent.')
print(' ')


print(' ')
print("Its original regular tet triangulation is not canonical.")
print("The number of OP isometries preserving this triangulation is",len(orb.isometriesOP()))
print("We can make it canonical...")
print(' ')
if proto_canonize(orb):
    print("Canonize succeeded.")
print(' ')
print("And the resulting canonical decomposition is a triangulation, with info")
print(' ')
orb.info()
print(' ')
print("It has this many OP isometries.")
print(' ')
print(len(orb.isometriesOP()))
print(' ')
print("and they are")
print(orb.isometriesOP())
print(' ')

print("Now we check canonical decomp data for covers of O5.")
print(' ')
print("------------------------------------------------------------------------")
print(' ')

for i in range(len(Dests)):
    print(Dests[i])
    orb = dest_to_orb(Dests[i])
    if orb.is_proto_canonical():
        if transparent_faces_or_flat_tets(orb):
            print(' ')
            print("The original regular tet triangulation is proto_canonical, but the canonical decomp has cells which are not tetrahedra.")
            print("Will not compute isometry group. The info of the triangulation is")
            print(' ')
            orb.info()
            print(' ')
            for tet in orb.Tetrahedra:
                for two_subsimplex in TwoSubsimplices:
                    if transparent_face(two_subsimplex,tet):
                        print('Face',FaceIndex[two_subsimplex],'of tet',tet,'is transparent.')
            print(' ')
        else:
            print(' ')
            print("The original regular tet triangulation is already canonical, with info")
            print(' ')
            orb.info()
            print(' ')
            print("The number of OP isometries is",len(orb.isometriesOP()))
            print("and the OP isometry group is")
            print(" ")
            print(orb.isometriesOP())
    else:
        print(' ')
        print("The original regular tet triangulation is not canonical. The number of OP isometries of this triangulation is")
        print(' ')
        print(len(orb.isometriesOP()))
        print(' ')
        print("Now we try to find the canonical triangulation.")
        print(' ')
        if proto_canonize(orb):
            print("Canonize succeeded.")
            if transparent_faces_or_flat_tets(orb):
                print("Canonical decomp has non-tetrahedral cells. Will not compute isometry group. Its info is")
                print(' ')
                orb.info()
                print(' ')
                for tet in orb.Tetrahedra:
                    for two_subsimplex in TwoSubsimplices:
                        if transparent_face(two_subsimplex,tet):
                            print('Face',FaceIndex[two_subsimplex],'of tet',tet,'is transparent.')
            else:
                print("Canonical triangulation is")
                print(' ')
                orb.info()
                print(' ')
                print("The number of OP isometries is")
                print(' ')
                print(len(orb.isometriesOP()))
                print(' ')
                print("The OP isometry group is")
                print(" ")
                print(orb.isometriesOP())
    print(" ")
    print(" ")
    print("------------------------------------------------------")
    print(' ')
    print(' ')
"""


with open("48seqs.json", "r") as read_file:
    OrbDictionary = json.load(read_file)
    keyz = OrbDictionary.keys()
    OrbDictionary = {eval(k):OrbDictionary[k] for k in keyz}

min_orb = dest_to_orb(OrbDictionary[(1,0)])
for key in OrbDictionary.keys():
    print(key)
    dest = OrbDictionary[key]
    orb = dest_to_orb(dest)
    print(exists_covering(orb,min_orb))
    print(' ')


"""
for key in OrbDictionary.keys():
    print(key)
    print(' ')
    dest = OrbDictionary[key]
    orb = dest_to_orb(dest)
    orb.info()
    print(' ')
    group = simplicial_maps_OP(orb,orb)
    print(group)
    print(' ')
    quotient_orb = quotient(orb,group)
    quotient_orb.info()
    print(' ')
    print('--------------------------------------------------------------')
    print(' ')
"""

"""
# The one dest where proto_canonize fails.
dest = OrbDictionary[(45,2)]
orb = dest_to_orb(dest)
orb.info()
print(proto_canonize(orb))
orb.info()
print_face_concavity(orb)
# Could be I need a new case of retriangulate_cube to handle it.
"""

"""
num_fail = 0
num_success = 0
for key in OrbDictionary.keys():
    dest = OrbDictionary[key]
    orb = dest_to_orb(dest)
    if orb.is_proto_canonical() is False:
        print('dest at', key, 'is not canonical')
        if proto_canonize(orb):
            print('canonize succeeded')
            num_success = num_success + 1
        else:
            print('canonize failed')
            num_fail = num_fail + 1
        print(' ')
print('num_success = ',num_success)
print('num_fail = ',num_fail)
"""

"""
for key in OrbDictionary.keys():
    dest = OrbDictionary[key]
    orb = dest_to_orb(dest)
    if len(orb.Tetrahedra) == 1:
        continue
    for tet in orb.Tetrahedra:
        if len(tet.Symmetries) == 2:
            break
    else:
        continue
    break
print(dest)
orb.info()
for edge in orb.Edges:
    print(" ")
    print(edge.Corners)
    print(edge.LocusOrder)
    print(" ")

"""


"""
dest = OrbDictionary[(28,7)]
orb = dest_to_orb(dest)
orb.info()
print(proto_canonize(orb))
orb.info()
for tet in orb.Tetrahedra:
    for face in TwoSubsimplices:
        if concave_face(face,tet):
            print('face',FaceIndex[face],'is concave in',tet)

#worked out the previous bug for this. It was trying to do a 3-6 move when it wasn't actually
#allowed. But apparently proto_canonize gets stuck otherwise. Have to figure out what could be
#done next. From drawing pictures, maybe there's some kind of 'double' 3-6 move.

#Later update: this does work now by allowing flat tets and having them cancel later! Nice.
"""

"""
Remaining dest seqs are (32,1), (32,0), (31,0), and (30,11). It's interesting
that they're so near each other, as in they have roughly the same covering degree.
(30,11) I've investigated above. By fixing cancel_tetrahedra, I was able to make one
more move on it, but there remains a flat tet which couldn't be cancelled.

Update 1/19/22. I can now make these all canonical, see below. Required a 4-4 move,
the ability to retriangulate a cube, and the realization that a proto-canonical triangulation
could have a flat tet which can't be cancelled, because that flat tet could encode how some
square face of a non-tetrahedral cell in the canonical decomposition is glued to itself.
"""

"""
dest = OrbDictionary[(30,11)]
orb = dest_to_orb(dest)
print(proto_canonize(orb))
orb.info()
for tet in orb.Tetrahedra:
    for face in TwoSubsimplices:
        if transparent_face(face,tet):
            print('face',FaceIndex[face],'in',tet,'is transparent')
#It is proto-canonical, although there is a flat tet. I think it's like the (32,0), where the
#flat tet is just encoding how the square face of a pyramid should be glued to itself.
"""

"""
dest = OrbDictionary[(31,0)]
orb = dest_to_orb(dest)
print(proto_canonize(orb))
orb.info()

for tet in orb.Tetrahedra:
    for face in TwoSubsimplices:
        if transparent_face(face,tet):
            print('face',FaceIndex[face],'in',tet,"is transparent")
#Got it proto-canonical, seems very similar to (30,11), with a flat tet.
"""


"""
dest = OrbDictionary[(32,0)]
orb = dest_to_orb(dest)
print(proto_canonize(orb))
orb.info()
tet2 = orb.Tetrahedra[2]
tet3 = orb.Tetrahedra[3]
print(tet2.tilt(V1) + tet3.tilt(V3))
#Got it! This one needs a 4-4 move, it turns out, which I had not created until just now.
#It's a 4-4 move with symmetry actually, so not a normal manifold 4-4 move. The result of
#that move is a pyramid with three triangular faces and one square face, divided into two
#tetrahedra. However, can see that the tilt sum for the pair of faces where these two
#tetrahedra meet is 0, so for the canonical decomp we actually just take that whole pyramid. Cool!
"""


"""
dest = OrbDictionary[(32,1)]
orb = dest_to_orb(dest)
print(proto_canonize(orb))
orb.info()
#Also got this canonical with the 4-4 move! This is very similar to (32,0), they might even be
#isometric.
"""

"""
O14_0 = [0, 1, 2, 3, 2, 4, 0, 2, 1, 0, 5, 1, 6, 3, 3, 0, 5, 7, 1, 8, 4, 2, 7, 9, 3, 6, 6, 6, 7, 5, 4, 10, 
    11, 9, 11, 4, 12, 13, 8, 5, 13, 12, 13, 7, 8, 8, 12, 12, 9, 11, 10, 11, 10, 10, 9, 13]
orb = dest_to_orb(O14_0)
#orb.info()
for edge in orb.Edges:
    print(edge)
    print(edge.LocusOrder)
    print(edge.Corners)
    print(' ')
"""
